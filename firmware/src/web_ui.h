#ifndef WEB_UI_H
#define WEB_UI_H

#include <Arduino.h>

// HTML content for the web UI (stored in flash memory)
const char html_index[] PROGMEM = "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Rotator Control</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        header {\n            background-color: #2c3e50;\n            color: white;\n            padding: 10px 0;\n            text-align: center;\n            margin-bottom: 20px;\n        }\n        h1 {\n            margin: 0;\n        }\n        .card {\n            background-color: white;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n            padding: 20px;\n            margin-bottom: 20px;\n        }\n        .status {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 15px;\n        }\n        .status-item {\n            text-align: center;\n            flex: 1;\n        }\n        .status-value {\n            font-size: 24px;\n            font-weight: bold;\n        }\n        .action-buttons {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 10px;\n            margin-bottom: 15px;\n        }\n        button {\n            padding: 10px;\n            border: none;\n            border-radius: 5px;\n            background-color: #3498db;\n            color: white;\n            cursor: pointer;\n            font-size: 16px;\n        }\n        button:hover {\n            background-color: #2980b9;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n        input, select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        .color-preview {\n            width: 30px;\n            height: 30px;\n            display: inline-block;\n            margin-left: 10px;\n            border: 1px solid #ccc;\n            vertical-align: middle;\n        }\n        .tab {\n            overflow: hidden;\n            border: 1px solid #ccc;\n            background-color: #f1f1f1;\n            border-radius: 5px 5px 0 0;\n        }\n        .tab button {\n            background-color: inherit;\n            float: left;\n            border: none;\n            outline: none;\n            cursor: pointer;\n            padding: 14px 16px;\n            transition: 0.3s;\n            color: #333;\n        }\n        .tab button:hover {\n            background-color: #ddd;\n        }\n        .tab button.active {\n            background-color: #3498db;\n            color: white;\n        }\n        .tabcontent {\n            display: none;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-top: none;\n            border-radius: 0 0 5px 5px;\n            background-color: white;\n        }\n        .active-tab {\n            display: block;\n        }\n        .loading {\n            text-align: center;\n            margin: 20px 0;\n        }\n        .loader {\n            border: 5px solid #f3f3f3;\n            border-top: 5px solid #3498db;\n            border-radius: 50%;\n            width: 50px;\n            height: 50px;\n            animation: spin 2s linear infinite;\n            margin: 0 auto;\n        }\n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        .hidden {\n            display: none;\n        }\n        #ota-form {\n            margin-top: 20px;\n        }\n        #ota-progress {\n            width: 100%;\n            height: 20px;\n            background-color: #f3f3f3;\n            margin-top: 10px;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        #ota-progress-bar {\n            height: 100%;\n            width: 0%;\n            background-color: #4CAF50;\n            transition: width 0.3s;\n        }\n        #ota-status {\n            margin-top: 10px;\n            font-weight: bold;\n        }\n        \n        /* Status message styles */\n        .success {\n            color: #4CAF50;\n            background-color: #f0f8f0;\n            border: 1px solid #4CAF50;\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n        \n        .error {\n            color: #F44336;\n            background-color: #fdf0f0;\n            border: 1px solid #F44336;\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n        \n        .info {\n            color: #2196F3;\n            background-color: #f0f4ff;\n            border: 1px solid #2196F3;\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n        \n        /* Debug tab styles */\n        .debug-controls {\n            margin-bottom: 20px;\n            padding: 15px;\n            background-color: #f8f9fa;\n            border-radius: 5px;\n        }\n        \n        .debug-controls button {\n            margin-right: 10px;\n            margin-bottom: 10px;\n        }\n        \n        .debug-status {\n            margin-top: 10px;\n            font-size: 14px;\n            color: #666;\n        }\n        \n        .plot-container {\n            margin-bottom: 30px;\n            padding: 15px;\n            background-color: white;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n            overflow: hidden; /* Prevent content from overflowing */\n        }\n        \n        .plot-container h3 {\n            margin-top: 0;\n            margin-bottom: 15px;\n            color: #2c3e50;\n        }\n        \n        .plot-container canvas {\n            border: 1px solid #ddd;\n            border-radius: 3px;\n            display: block;\n            margin: 0 auto;\n            max-width: 100%; /* Make canvas responsive */\n            height: auto; /* Maintain aspect ratio */\n        }\n        \n        .plot-legend {\n            margin-top: 10px;\n            text-align: center;\n        }\n        \n        .legend-item {\n            display: inline-block;\n            margin: 0 15px;\n            font-size: 14px;\n        }\n        \n        .legend-color {\n            display: inline-block;\n            width: 20px;\n            height: 12px;\n            margin-right: 5px;\n            vertical-align: middle;\n        }\n        \n        /* Responsive design for smaller screens */\n        @media (max-width: 768px) {\n            .container {\n                padding: 10px;\n            }\n            \n            .plot-container canvas {\n                width: 100%;\n                height: auto;\n            }\n            \n            .legend-item {\n                display: block;\n                margin: 5px 0;\n                text-align: center;\n            }\n            \n            .debug-controls button {\n                width: 100%;\n                margin-bottom: 10px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Rotator Control v1.1</h1>\n    </header>\n    \n    <div class=\"container\">\n        <div class=\"card\">\n            <div class=\"status\">\n                <div class=\"status-item\">\n                    <div>Current Position</div>\n                    <div class=\"status-value\" id=\"current-angle\">-</div>\n                    <div id=\"current-position-counts\">-</div>\n                </div>\n                <div class=\"status-item\">\n                    <div>Current Color</div>\n                    <div class=\"color-preview\" id=\"current-color\"></div>\n                </div>\n                <div class=\"status-item\">\n                    <div>Auto Rotation</div>\n                    <div class=\"status-value\" id=\"auto-rotation-status\">-</div>\n                </div>\n                <div>\n                    <div>Network: <span id=\"current-wifi-ssid\">None</span></div>\n                    <div>WiFi RSSI: <span id=\"current-wifi-rssi\">Unknown</span></div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"tab\">\n            <button class=\"tablinks active\" onclick=\"openTab(event, 'control')\">Control</button>\n            <button class=\"tablinks\" onclick=\"openTab(event, 'wifi')\">WiFi</button>\n            <button class=\"tablinks\" onclick=\"openTab(event, 'settings')\">Settings</button>\n            <button class=\"tablinks\" onclick=\"openTab(event, 'calibration')\">Calibration</button>\n            <button class=\"tablinks\" onclick=\"openTab(event, 'motion-control')\">Motion Control</button>\n            <button class=\"tablinks\" onclick=\"openTab(event, 'debug')\">Debug</button>\n            <button class=\"tablinks\" onclick=\"openTab(event, 'updates')\">Updates</button>\n        </div>\n        \n        <!-- Control Tab -->\n        <div id=\"control\" class=\"tabcontent active-tab\">\n            <h2>Rotate</h2>\n            <div class=\"action-buttons\">\n                <button onclick=\"rotate(0)\">0째</button>\n                <button onclick=\"rotate(90)\">90째</button>\n                <button onclick=\"rotate(180)\">180째</button>\n                <button onclick=\"rotate(270)\">270째</button>\n            </div>\n            \n            <h2>Auto Rotation</h2>\n            <div class=\"form-group\">\n                <label>\n                    <input type=\"checkbox\" id=\"auto-rotation-toggle\" onchange=\"toggleAutoRotation()\">\n                    Enable Auto Rotation\n                </label>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"rotation-interval\">Rotation Interval (seconds)</label>\n                <input type=\"number\" id=\"rotation-interval\" min=\"5\" value=\"60\">\n                <button onclick=\"saveRotationInterval()\">Save</button>\n            </div>\n        </div>\n        \n        <!-- WiFi Tab -->\n        <div id=\"wifi\" class=\"tabcontent\">\n            <h2>WiFi Configuration</h2>\n            \n            <div class=\"card\">\n                <h3>Current Connection Status</h3>\n                <div class=\"status\">\n                    <div class=\"status-item\">\n                        <div>Status</div>\n                        <div class=\"status-value\" id=\"wifi-status\">-</div>\n                    </div>\n                    <div class=\"status-item\">\n                        <div>IP Address</div>\n                        <div class=\"status-value\" id=\"wifi-ip\">-</div>\n                    </div>\n                    <div class=\"status-item\">\n                        <div>mDNS Name</div>\n                        <div class=\"status-value\" id=\"wifi-mdns\">-</div>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"card\">\n                <h3>Connect to WiFi Network</h3>\n                <p>Scan for available networks and connect to your WiFi router.</p>\n                \n                <div class=\"form-group\">\n                    <button onclick=\"scanNetworks()\" id=\"scan-button\">Scan for Networks</button>\n                    <div id=\"scan-status\" class=\"hidden\"></div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"wifi-network-select\">Select Network</label>\n                    <select id=\"wifi-network-select\" onchange=\"onNetworkSelect()\">\n                        <option value=\"\">Select a network...</option>\n                    </select>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"wifi-password\">Password</label>\n                    <input type=\"password\" id=\"wifi-password\" placeholder=\"Enter WiFi password\">\n                </div>\n                \n                <div class=\"action-buttons\">\n                    <button onclick=\"testConnection()\" id=\"test-button\" disabled>Test Connection</button>\n                    <button onclick=\"saveConnection()\" id=\"save-button\" disabled>Save & Connect</button>\n                </div>\n                \n                <div id=\"wifi-message\" class=\"hidden\"></div>\n            </div>\n            \n            <div class=\"card\">\n                <h3>Current WiFi Network</h3>\n                <button onclick=\"disconnectWiFi()\" id=\"disconnect-button\" disabled>Disconnect & Clear</button>\n            </div>\n        </div>\n        \n        <!-- Settings Tab -->\n        <div id=\"settings\" class=\"tabcontent\">\n            <h2>WiFi Settings</h2>\n            <div class=\"form-group\">\n                <label for=\"ap-ssid\">Access Point SSID</label>\n                <input type=\"text\" id=\"ap-ssid\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"ap-password\">Access Point Password</label>\n                <input type=\"password\" id=\"ap-password\">\n            </div>\n            <button onclick=\"saveWifiSettings()\">Save WiFi Settings</button>\n            \n            <h2>Color Settings</h2>\n            <div class=\"form-group\">\n                <label for=\"color-0\">0째 Position Color</label>\n                <input type=\"color\" id=\"color-0\">\n                <div class=\"color-preview\" id=\"preview-0\"></div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"color-90\">90째 Position Color</label>\n                <input type=\"color\" id=\"color-90\">\n                <div class=\"color-preview\" id=\"preview-90\"></div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"color-180\">180째 Position Color</label>\n                <input type=\"color\" id=\"color-180\">\n                <div class=\"color-preview\" id=\"preview-180\"></div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"color-270\">270째 Position Color</label>\n                <input type=\"color\" id=\"color-270\">\n                <div class=\"color-preview\" id=\"preview-270\"></div>\n            </div>\n            <button onclick=\"saveColorSettings()\">Save Color Settings</button>\n            \n            <h2>Reset to Defaults</h2>\n            <button onclick=\"resetSettings()\">Reset All Settings</button>\n        </div>\n        \n        <!-- Calibration Tab -->\n        <div id=\"calibration\" class=\"tabcontent\">\n            <h2>Position Calibration</h2>\n            <p>Set the current physical position as the new zero reference point. This will maintain the relative spacing between all calibrated positions.</p>\n            <div class=\"action-buttons\">\n                <button onclick=\"setZeroPosition()\">Set Zero Position</button>\n            </div>\n\n            <h2>Full Revolution Count</h2>\n            <p>How many counts is a full revolution?</p>\n            <div class=\"form-group\">\n                <label for=\"full-rotation-count\">Full Rotation (encoder counts)</label>\n                <input type=\"number\" id=\"full-rotation-count\" placeholder=\"Enter position in counts\">\n                <button id=\"goto-button\" onclick=\"saveFullRotationSettings()\">Set Full Rotation Count</button>\n            </div>\n            \n            <h2>Go to Position</h2>\n            <p>Move to a specific encoder position for testing or calibration.</p>\n            <div class=\"form-group\">\n                <label for=\"goto-position\">Target Position (encoder counts)</label>\n                <input type=\"number\" id=\"goto-position\" placeholder=\"Enter position in counts\">\n                <button id=\"goto-button\" onclick=\"gotoPosition()\">Go to Position</button>\n            </div>\n            <div id=\"goto-status\" class=\"hidden\"></div>\n            \n            <h2>Fine Tuning</h2>\n            <div class=\"form-group\">\n                <label for=\"nudge-position\">Nudge position</label>\n                <input type=\"number\" id=\"nudge-position\" value=\"100\">\n            </div>\n            <div class=\"action-buttons\">\n                <button onclick=\"nudgePosition(true)\">Nudge Forward</button>\n                <button onclick=\"nudgePosition(false)\">Nudge Backward</button>\n            </div>\n            \n            <p>Current detected angle: <span id=\"calibration-current-angle\">-</span>째</p>\n            <div class=\"form-group\">\n                <label for=\"pos-0-degrees\">0째 Position (encoder counts)</label>\n                <input type=\"number\" id=\"pos-0-degrees\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"pos-90-degrees\">90째 Position (encoder counts)</label>\n                <input type=\"number\" id=\"pos-90-degrees\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"pos-180-degrees\">180째 Position (encoder counts)</label>\n                <input type=\"number\" id=\"pos-180-degrees\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"pos-270-degrees\">270째 Position (encoder counts)</label>\n                <input type=\"number\" id=\"pos-270-degrees\">\n            </div>\n            <button onclick=\"savePositionSettings()\">Save Position Settings</button>\n        </div>\n        \n        <!-- Motion Control Tab -->\n        <div id=\"motion-control\" class=\"tabcontent\">\n            <h2>Motion Control Configuration</h2>\n            <p>Configure motion control parameters for precise positioning and smooth movement.</p>\n            \n            <div class=\"form-group\">\n                <label for=\"position-hysteresis\">Position Hysteresis (encoder counts)</label>\n                <input type=\"number\" id=\"position-hysteresis\" min=\"1\" max=\"1000\" step=\"1\">\n                <small>Tolerance around target position before stopping (default: 20)</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"max-speed\">Maximum Speed (counts/second)</label>\n                <input type=\"number\" id=\"max-speed\" min=\"100\" max=\"20000\" step=\"100\">\n                <small>Maximum rotational speed (default: 6000)</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"acceleration\">Acceleration (counts/second짼)</label>\n                <input type=\"number\" id=\"acceleration\" min=\"100\" max=\"20000\" step=\"100\">\n                <small>Acceleration/deceleration rate (default: 4000)</small>\n            </div>\n            \n            <h3>PID Controller Gains</h3>\n            <p>Adjust these carefully - small changes can significantly affect performance.</p>\n            \n            <div class=\"form-group\">\n                <label for=\"vel-loop-p\">Proportional Gain (P)</label>\n                <input type=\"text\" id=\"vel-loop-p\" pattern=\"[+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?\">\n                <small>Proportional response to speed error (default: 3e-5)</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"vel-loop-i\">Integral Gain (I)</label>\n                <input type=\"text\" id=\"vel-loop-i\" pattern=\"[+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?\">\n                <small>Response to accumulated speed error (default: 6e-3)</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"vel-loop-d\">Derivative Gain (D)</label>\n                <input type=\"text\" id=\"vel-loop-d\" pattern=\"[+-]?([0-9]*[.])?[0-9]+([eE][+-]?[0-9]+)?\">\n                <small>Response to rate of speed error change (default: -2e-8)</small>\n            </div>\n            \n            <h3>Filter Settings</h3>\n            \n            <div class=\"form-group\">\n                <label for=\"vel-filter-persistence\">Velocity Filter Persistence</label>\n                <input type=\"number\" id=\"vel-filter-persistence\" min=\"0\" max=\"1\" step=\"0.01\">\n                <small>Velocity smoothing factor, 0=no filtering, 1=maximum filtering (default: 0.0)</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"spd-err-persistence\">Speed Error Persistence</label>\n                <input type=\"number\" id=\"spd-err-persistence\" min=\"0\" max=\"1\" step=\"0.01\">\n                <small>Speed error derivative smoothing factor (default: 0.0)</small>\n            </div>\n            \n            <button onclick=\"saveMotionControlSettings()\">Save Motion Control Settings</button>\n            <button onclick=\"resetMotionControlToDefaults()\">Reset to Defaults</button>\n        </div>\n        \n        <!-- Debug Tab -->\n        <div id=\"debug\" class=\"tabcontent\">\n            <h2>Motion Control Debug</h2>\n            <div class=\"debug-controls\">\n                <button id=\"debug-toggle\" onclick=\"toggleDebug()\">Start Debug</button>\n                <button id=\"debug-clear\" onclick=\"clearPlots()\">Clear Plots</button>\n                <div class=\"debug-status\">\n                    Status: <span id=\"debug-status\">Stopped</span> | \n                    Connection: <span id=\"debug-connection\">Disconnected</span> |\n                    Data Points: <span id=\"debug-points\">0</span>\n                </div>\n            </div>\n            \n            <div class=\"plot-container\">\n                <h3>Position Tracking</h3>\n                <canvas id=\"position-plot\" width=\"750\" height=\"250\"></canvas>\n                <div class=\"plot-legend\">\n                    <span class=\"legend-item\"><span class=\"legend-color\" style=\"background-color: #3498db;\"></span>Current Position</span>\n                    <span class=\"legend-item\"><span class=\"legend-color\" style=\"background-color: #2ecc71;\"></span>Current Velocity</span>\n                    <span class=\"legend-item\"><span class=\"legend-color\" style=\"background-color: #e74c3c;\"></span>Target Position</span>\n                </div>\n            </div>\n            \n            <div class=\"plot-container\">\n                <h3>PID Error Terms</h3>\n                <canvas id=\"error-plot\" width=\"750\" height=\"250\"></canvas>\n                <div class=\"plot-legend\">\n                    <span class=\"legend-item\"><span class=\"legend-color\" style=\"background-color: #2ecc71;\"></span>Speed Error</span>\n                    <span class=\"legend-item\"><span class=\"legend-color\" style=\"background-color: #f39c12;\"></span>Error Integral</span>\n                    <span class=\"legend-item\"><span class=\"legend-color\" style=\"background-color: #9b59b6;\"></span>Error Derivative</span>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Updates Tab -->\n        <div id=\"updates\" class=\"tabcontent\">\n            <h2>OTA Firmware Update</h2>\n            <form id=\"ota-form\" enctype=\"multipart/form-data\">\n                <div class=\"form-group\">\n                    <label for=\"firmware\">Select Firmware File</label>\n                    <input type=\"file\" id=\"firmware\" name=\"firmware\" accept=\".bin\">\n                </div>\n                <button type=\"button\" onclick=\"uploadFirmware()\">Upload Firmware</button>\n            </form>\n            <div id=\"ota-progress\" class=\"hidden\">\n                <div id=\"ota-progress-bar\"></div>\n            </div>\n            <div id=\"ota-status\" class=\"hidden\"></div>\n        </div>\n        \n        <div id=\"loading\" class=\"loading hidden\">\n            <div class=\"loader\"></div>\n            <p>Loading...</p>\n        </div>\n    </div>\n\n    <script>\n        // Global variables\n        let statusUpdateInterval;\n        let currentStatus = {};\n        let configData = null;  // Store config separately from status\n        \n        // Initialize the page\n        document.addEventListener('DOMContentLoaded', function() {\n            fetchStatus();\n            fetchConfig();  // Load config once at startup\n            fetchWiFiStatus(); // Load WiFi status\n            \n            // Setup color picker previews\n            document.getElementById('color-0').addEventListener('input', function() {\n                updateColorPreview('preview-0', this.value);\n            });\n            document.getElementById('color-90').addEventListener('input', function() {\n                updateColorPreview('preview-90', this.value);\n            });\n            document.getElementById('color-180').addEventListener('input', function() {\n                updateColorPreview('preview-180', this.value);\n            });\n            document.getElementById('color-270').addEventListener('input', function() {\n                updateColorPreview('preview-270', this.value);\n            });\n            \n            // Start periodic status updates\n            statusUpdateInterval = setInterval(fetchStatus, 2000);\n        });\n        \n        // Tab handling\n        function openTab(evt, tabName) {\n            let tabcontent = document.getElementsByClassName(\"tabcontent\");\n            for (let i = 0; i < tabcontent.length; i++) {\n                tabcontent[i].classList.remove(\"active-tab\");\n            }\n            \n            let tablinks = document.getElementsByClassName(\"tablinks\");\n            for (let i = 0; i < tablinks.length; i++) {\n                tablinks[i].classList.remove(\"active\");\n            }\n            \n            document.getElementById(tabName).classList.add(\"active-tab\");\n            evt.currentTarget.classList.add(\"active\");\n            \n            // Refresh status when showing certain tabs\n            if (tabName === 'calibration') {\n                fetchStatus();\n            } else if (tabName === 'wifi') {\n                fetchWiFiStatus();\n            }\n        }\n        \n        // Fetch current status from the device\n        function fetchStatus() {\n            fetch('/api/status')\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error('Failed to fetch status');\n                    }\n                })\n                .then(data => {\n                    currentStatus = data;\n                    updateStatusDisplay(data);\n                })\n                .catch(error => console.error('Error fetching status:', error));\n        }\n\n        // Fetch configuration from the device\n        function fetchConfig() {\n            console.log('Fetching config...');\n            fetch('/api/config')\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error('Failed to fetch config');\n                    }\n                })\n                .then(data => {\n                    console.log('Config data received:', data);\n                    configData = data;\n                    updateConfigDisplay(data);\n                })\n                .catch(error => {\n                    console.error('Error fetching config:', error);\n                });\n        }\n        \n        // Update only the status display elements\n        function updateStatusDisplay(data) {\n            if (!data) {\n                console.error('No data received in updateStatusDisplay');\n                return;\n            }\n\n            // Update angle and position\n            if (data.currentAngle !== undefined) {\n                document.getElementById('current-angle').textContent = data.currentAngle + '째';\n                document.getElementById('calibration-current-angle').textContent = data.currentAngle;\n            }\n            \n            if (data.currentPosition !== undefined) {\n                document.getElementById('current-position-counts').textContent = data.currentPosition + ' counts';\n            }\n            \n            // Update color display - convert decimal to hex\n            if (data.currentColor !== undefined) {\n                const colorHex = '#' + data.currentColor.toString(16).padStart(6, '0');\n                document.getElementById('current-color').style.backgroundColor = colorHex;\n            }\n            \n            // Update auto rotation status\n            if (data.autoRotationEnabled !== undefined) {\n                document.getElementById('auto-rotation-status').textContent = data.autoRotationEnabled ? 'ON' : 'OFF';\n                document.getElementById('auto-rotation-toggle').checked = data.autoRotationEnabled;\n            }\n        }\n        \n        // Update only config-related form fields\n        function updateConfigDisplay(data) {\n            console.log('Updating config display with data:', data);\n            \n            try {\n                // Position calibration\n                const pos0 = document.getElementById('pos-0-degrees');\n                const pos90 = document.getElementById('pos-90-degrees');\n                const pos180 = document.getElementById('pos-180-degrees');\n                const pos270 = document.getElementById('pos-270-degrees');\n\n                const full_rotation_count = document.getElementById('full-rotation-count');\n                \n                \n                if (pos0) pos0.value = data.pos_0_degrees;\n                if (pos90) pos90.value = data.pos_90_degrees;\n                if (pos180) pos180.value = data.pos_180_degrees;\n                if (pos270) pos270.value = data.pos_270_degrees;\n                if (full_rotation_count) full_rotation_count.value = data.full_rotation_count;\n\n                \n                // Colors\n                updateColorField('color-0', 'preview-0', data.color_0);\n                updateColorField('color-90', 'preview-90', data.color_90);\n                updateColorField('color-180', 'preview-180', data.color_180);\n                updateColorField('color-270', 'preview-270', data.color_270);\n                \n                // WiFi settings\n                const apSsid = document.getElementById('ap-ssid');\n                const apPassword = document.getElementById('ap-password');\n                \n                console.log('WiFi elements found:', {apSsid, apPassword});\n                \n                if (apSsid) apSsid.value = data.ap_ssid;\n                if (apPassword) apPassword.value = data.ap_password || '';\n                \n                // Rotation interval\n                const rotationInterval = document.getElementById('rotation-interval');\n                console.log('Rotation interval element found:', rotationInterval);\n                \n                if (rotationInterval) rotationInterval.value = data.rotation_interval;\n                \n                // Motion control parameters\n                if (data.position_hysteresis !== undefined) {\n                    const posHysteresis = document.getElementById('position-hysteresis');\n                    if (posHysteresis) posHysteresis.value = data.position_hysteresis;\n                }\n                \n                if (data.max_speed !== undefined) {\n                    const maxSpeed = document.getElementById('max-speed');\n                    if (maxSpeed) maxSpeed.value = data.max_speed;\n                }\n                \n                if (data.acceleration !== undefined) {\n                    const acceleration = document.getElementById('acceleration');\n                    if (acceleration) acceleration.value = data.acceleration;\n                }\n                \n                if (data.vel_loop_p !== undefined) {\n                    const velLoopP = document.getElementById('vel-loop-p');\n                    if (velLoopP) velLoopP.value = data.vel_loop_p.toExponential();\n                }\n                \n                if (data.vel_loop_i !== undefined) {\n                    const velLoopI = document.getElementById('vel-loop-i');\n                    if (velLoopI) velLoopI.value = data.vel_loop_i.toExponential();\n                }\n                \n                if (data.vel_loop_d !== undefined) {\n                    const velLoopD = document.getElementById('vel-loop-d');\n                    if (velLoopD) velLoopD.value = data.vel_loop_d.toExponential();\n                }\n                \n                if (data.vel_filter_persistence !== undefined) {\n                    const velFilterPersistence = document.getElementById('vel-filter-persistence');\n                    if (velFilterPersistence) velFilterPersistence.value = data.vel_filter_persistence;\n                }\n                \n                if (data.spd_err_persistence !== undefined) {\n                    const spdErrPersistence = document.getElementById('spd-err-persistence');\n                    if (spdErrPersistence) spdErrPersistence.value = data.spd_err_persistence;\n                }\n                \n            } catch (error) {\n                console.error('Error in updateConfigDisplay:', error);\n            }\n        }\n        \n        // Update a color input field and its preview\n        function updateColorField(fieldId, previewId, colorValue) {\n            if (colorValue !== undefined) {\n                // Convert decimal to hex and ensure 6 digits with leading zeros\n                const hexColor = '#' + colorValue.toString(16).padStart(6, '0');\n                document.getElementById(fieldId).value = hexColor;\n                updateColorPreview(previewId, hexColor);\n            }\n        }\n        \n        // Update a color preview element\n        function updateColorPreview(previewId, color) {\n            document.getElementById(previewId).style.backgroundColor = color;\n        }\n        \n        // Command a rotation to a specific angle\n        function rotate(angle) {\n            showLoading();\n            \n            const formData = new FormData();\n            formData.append('angle', angle);\n            \n            fetch('/api/rotate', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                hideLoading();\n                if (response.ok) {\n                    // Update the status after a short delay to allow rotation to start\n                    setTimeout(fetchStatus, 500);\n                } else {\n                    alert('Failed to command rotation');\n                }\n            })\n            .catch(error => {\n                hideLoading();\n                console.error('Error rotating:', error);\n                alert('Error: ' + error.message);\n            });\n        }\n\n        function nudgePosition(forward) {\n            const nudgeSize = parseInt(document.getElementById('nudge-position').value);\n            const currPos = currentStatus.currentPosition;\n\n            if (isNaN(nudgeSize)) {\n                showGotoStatus('Please enter a valid nudge size', 'error');\n                return;\n            }\n\n            const formData = new FormData();\n            if(forward == true){\n                formData.append('position', currPos + nudgeSize);\n            }\n            else{\n                formData.append('position', currPos - nudgeSize);\n            }\n            \n            fetch('/api/goto', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                hideLoading();\n                if (response.ok) {\n                    // Update the status after a short delay to allow rotation to start\n                    setTimeout(fetchStatus, 100);\n                } else {\n                    console.error('Error commanding nudging:', error);\n                    alert('Failed to command rotation');\n                }\n            })\n            .catch(error => {\n                hideLoading();\n                console.error('Error nudging:', error);\n                alert('Error: ' + error.message);\n            });\n        }\n        \n        // Set the current position as the new zero reference point\n        function setZeroPosition() {\n            if (!confirm('This will set the current position as the new zero reference point while maintaining the relative spacing between all calibrated positions. Continue?')) {\n                return;\n            }\n            \n            showLoading();\n            \n            fetch('/api/set-zero', {\n                method: 'POST'\n            })\n            .then(response => {\n                hideLoading();\n                if (response.ok) {\n                    alert('Zero position set successfully! All calibrated positions have been updated.');\n                    fetchConfig(); // Refresh the config to show updated values\n                } else {\n                    alert('Failed to set zero position');\n                }\n            })\n            .catch(error => {\n                hideLoading();\n                console.error('Error setting zero position:', error);\n                alert('Error: ' + error.message);\n            });\n        }\n        \n        // Go to a specific position in encoder counts\n        function gotoPosition() {\n            const positionInput = document.getElementById('goto-position');\n            const gotoButton = document.getElementById('goto-button');\n            const statusDiv = document.getElementById('goto-status');\n            \n            const targetPosition = parseInt(positionInput.value);\n            \n            // Validate input\n            if (isNaN(targetPosition)) {\n                showGotoStatus('Please enter a valid position number', 'error');\n                return;\n            }\n            \n            // Disable button during motion\n            gotoButton.disabled = true;\n            gotoButton.textContent = 'Moving...';\n            showGotoStatus('Moving to position ' + targetPosition + '...', 'info');\n            \n            const formData = new FormData();\n            formData.append('position', targetPosition);\n            \n            fetch('/api/goto', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                if (response.ok) {\n                    showGotoStatus('Movement command sent successfully', 'success');\n                    // Update status after a short delay\n                    setTimeout(fetchStatus, 500);\n                    // Re-enable button after a delay\n                    setTimeout(() => {\n                        gotoButton.disabled = false;\n                        gotoButton.textContent = 'Go to Position';\n                    }, 2000);\n                } else {\n                    showGotoStatus('Failed to send movement command', 'error');\n                    gotoButton.disabled = false;\n                    gotoButton.textContent = 'Go to Position';\n                }\n            })\n            .catch(error => {\n                console.error('Error going to position:', error);\n                showGotoStatus('Error: ' + error.message, 'error');\n                gotoButton.disabled = false;\n                gotoButton.textContent = 'Go to Position';\n            });\n        }\n        \n        // Show status message for goto position\n        function showGotoStatus(message, type) {\n            const statusDiv = document.getElementById('goto-status');\n            statusDiv.textContent = message;\n            statusDiv.className = type; // 'success', 'error', or 'info'\n            statusDiv.classList.remove('hidden');\n            \n            // Auto-hide after 5 seconds for success/info messages\n            if (type === 'success' || type === 'info') {\n                setTimeout(() => {\n                    statusDiv.classList.add('hidden');\n                }, 5000);\n            }\n        }\n        \n        // Toggle auto-rotation\n        function toggleAutoRotation() {\n            const enabled = document.getElementById('auto-rotation-toggle').checked;\n            saveSettings({\n                auto_rotation_enabled: enabled\n            });\n        }\n        \n        // Save rotation interval\n        function saveRotationInterval() {\n            const interval = parseInt(document.getElementById('rotation-interval').value);\n            if (isNaN(interval) || interval < 5) {\n                alert('Please enter a valid interval (minimum 5 seconds)');\n                return;\n            }\n            \n            saveSettings({\n                rotation_interval: interval\n            });\n        }\n        \n        // Save WiFi settings\n        function saveWifiSettings() {\n            const ssid = document.getElementById('ap-ssid').value.trim();\n            const password = document.getElementById('ap-password').value;\n            \n            if (!ssid) {\n                alert('SSID cannot be empty');\n                return;\n            }\n            \n            saveSettings({\n                ap_ssid: ssid,\n                ap_password: password\n            });\n        }\n        \n        // Save color settings\n        function saveColorSettings() {\n            const color0 = parseInt(document.getElementById('color-0').value.substring(1), 16);\n            const color90 = parseInt(document.getElementById('color-90').value.substring(1), 16);\n            const color180 = parseInt(document.getElementById('color-180').value.substring(1), 16);\n            const color270 = parseInt(document.getElementById('color-270').value.substring(1), 16);\n            \n            saveSettings({\n                color_0: color0,\n                color_90: color90,\n                color_180: color180,\n                color_270: color270\n            });\n        }\n        \n        // Save position settings\n        function savePositionSettings() {\n            const pos0 = parseInt(document.getElementById('pos-0-degrees').value);\n            const pos90 = parseInt(document.getElementById('pos-90-degrees').value);\n            const pos180 = parseInt(document.getElementById('pos-180-degrees').value);\n            const pos270 = parseInt(document.getElementById('pos-270-degrees').value);\n            \n            if (isNaN(pos0) || isNaN(pos90) || isNaN(pos180) || isNaN(pos270)) {\n                alert('All position values must be valid numbers');\n                return;\n            }\n            \n            saveSettings({\n                pos_0_degrees: pos0,\n                pos_90_degrees: pos90,\n                pos_180_degrees: pos180,\n                pos_270_degrees: pos270\n            });\n        }\n        \n        function saveFullRotationSettings() {\n            const full_rotation_count = parseInt(document.getElementById('full-rotation-count').value);\n            \n            if (isNaN(full_rotation_count)) {\n                alert('Full revolution count must be a valid number');\n                return;\n            }\n            \n            saveSettings({\n                full_rotation_count: full_rotation_count,\n            });\n        }\n        \n        // Save motion control settings\n        function saveMotionControlSettings() {\n            // Get basic parameters\n            const positionHysteresis = parseInt(document.getElementById('position-hysteresis').value);\n            const maxSpeed = parseFloat(document.getElementById('max-speed').value);\n            const acceleration = parseFloat(document.getElementById('acceleration').value);\n            \n            // Get PID gains (handle scientific notation)\n            const velLoopP = parseFloat(document.getElementById('vel-loop-p').value);\n            const velLoopI = parseFloat(document.getElementById('vel-loop-i').value);\n            const velLoopD = parseFloat(document.getElementById('vel-loop-d').value);\n            \n            // Get filter settings\n            const velFilterPersistence = parseFloat(document.getElementById('vel-filter-persistence').value);\n            const spdErrPersistence = parseFloat(document.getElementById('spd-err-persistence').value);\n            \n            // Validate inputs\n            if (isNaN(positionHysteresis) || positionHysteresis < 1) {\n                alert('Position hysteresis must be a positive integer');\n                return;\n            }\n            \n            if (isNaN(maxSpeed) || maxSpeed < 100) {\n                alert('Maximum speed must be at least 100 counts/second');\n                return;\n            }\n            \n            if (isNaN(acceleration) || acceleration < 100) {\n                alert('Acceleration must be at least 100 counts/second짼');\n                return;\n            }\n            \n            if (isNaN(velLoopP) || isNaN(velLoopI) || isNaN(velLoopD)) {\n                alert('All PID gains must be valid numbers (scientific notation allowed)');\n                return;\n            }\n            \n            if (isNaN(velFilterPersistence) || velFilterPersistence < 0 || velFilterPersistence > 1) {\n                alert('Velocity filter persistence must be between 0 and 1');\n                return;\n            }\n            \n            if (isNaN(spdErrPersistence) || spdErrPersistence < 0 || spdErrPersistence > 1) {\n                alert('Speed error persistence must be between 0 and 1');\n                return;\n            }\n            \n            saveSettings({\n                position_hysteresis: positionHysteresis,\n                max_speed: maxSpeed,\n                acceleration: acceleration,\n                vel_loop_p: velLoopP,\n                vel_loop_i: velLoopI,\n                vel_loop_d: velLoopD,\n                vel_filter_persistence: velFilterPersistence,\n                spd_err_persistence: spdErrPersistence\n            });\n        }\n        \n        // Reset motion control settings to defaults\n        function resetMotionControlToDefaults() {\n            if (!confirm('Reset motion control parameters to default values?')) {\n                return;\n            }\n            \n            // Set default values\n            document.getElementById('position-hysteresis').value = 20;\n            document.getElementById('max-speed').value = 6000;\n            document.getElementById('acceleration').value = 4000;\n            document.getElementById('vel-loop-p').value = '3e-5';\n            document.getElementById('vel-loop-i').value = '6e-3';\n            document.getElementById('vel-loop-d').value = '-2e-8';\n            document.getElementById('vel-filter-persistence').value = 0.0;\n            document.getElementById('spd-err-persistence').value = 0.0;\n            \n            // Save the defaults\n            saveMotionControlSettings();\n        }\n        \n        // Generic settings save function\n        function saveSettings(settings) {\n            showLoading();\n            \n            fetch('/api/settings', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(settings)\n            })\n            .then(response => {\n                hideLoading();\n                if (response.ok) {\n                    alert('Settings saved successfully');\n                    fetchConfig();  // Refresh config after save\n                } else {\n                    alert('Failed to save settings');\n                }\n            })\n            .catch(error => {\n                hideLoading();\n                console.error('Error saving settings:', error);\n                alert('Error: ' + error.message);\n            });\n        }\n        \n        // Reset all settings to defaults\n        function resetSettings() {\n            if (!confirm('Are you sure you want to reset all settings to defaults?')) {\n                return;\n            }\n            \n            showLoading();\n            \n            fetch('/api/reset', {\n                method: 'POST'\n            })\n            .then(response => {\n                hideLoading();\n                if (response.ok) {\n                    alert('Settings reset to defaults');\n                    fetchConfig();  // Refresh config after reset\n                } else {\n                    alert('Failed to reset settings');\n                }\n            })\n            .catch(error => {\n                hideLoading();\n                console.error('Error resetting settings:', error);\n                alert('Error: ' + error.message);\n            });\n        }\n        \n        // Upload firmware for OTA update\n        function uploadFirmware() {\n            const fileInput = document.getElementById('firmware');\n            if (!fileInput.files.length) {\n                alert('Please select a firmware file');\n                return;\n            }\n            \n            const file = fileInput.files[0];\n            const formData = new FormData();\n            formData.append('firmware', file);\n            \n            // Show progress elements\n            document.getElementById('ota-progress').classList.remove('hidden');\n            document.getElementById('ota-status').classList.remove('hidden');\n            document.getElementById('ota-status').textContent = 'Starting upload...';\n            \n            // Reset progress bar\n            document.getElementById('ota-progress-bar').style.width = '0%';\n            \n            const xhr = new XMLHttpRequest();\n            xhr.open('POST', '/update', true);\n            \n            xhr.upload.onprogress = function(event) {\n                if (event.lengthComputable) {\n                    const percentComplete = (event.loaded / event.total) * 100;\n                    document.getElementById('ota-progress-bar').style.width = percentComplete + '%';\n                    document.getElementById('ota-status').textContent = 'Uploading: ' + percentComplete.toFixed(1) + '%';\n                }\n            };\n            \n            xhr.onload = function() {\n                if (xhr.status === 200) {\n                    document.getElementById('ota-status').textContent = 'Update successful. Device is rebooting...';\n                    document.getElementById('ota-progress-bar').style.width = '100%';\n                    document.getElementById('ota-progress-bar').style.backgroundColor = '#4CAF50';\n                    \n                    // Stop status updates during reboot\n                    clearInterval(statusUpdateInterval);\n                    \n                    // Try to reconnect after a delay\n                    setTimeout(function() {\n                        document.getElementById('ota-status').textContent = 'Attempting to reconnect...';\n                        attemptReconnect();\n                    }, 10000);\n                } else {\n                    document.getElementById('ota-status').textContent = 'Update failed: ' + xhr.responseText;\n                    document.getElementById('ota-progress-bar').style.backgroundColor = '#F44336';\n                }\n            };\n            \n            xhr.onerror = function() {\n                document.getElementById('ota-status').textContent = 'Update failed due to network error';\n                document.getElementById('ota-progress-bar').style.backgroundColor = '#F44336';\n            };\n            \n            xhr.send(formData);\n        }\n        \n        // Attempt to reconnect after OTA update\n        function attemptReconnect() {\n            fetch('/api/status')\n                .then(response => {\n                    if (response.ok) {\n                        document.getElementById('ota-status').textContent = 'Connected successfully to updated device!';\n                        // Restart status updates\n                        statusUpdateInterval = setInterval(fetchStatus, 2000);\n                        fetchStatus();\n                    } else {\n                        throw new Error('Device not ready');\n                    }\n                })\n                .catch(error => {\n                    document.getElementById('ota-status').textContent = 'Still waiting for device to come online...';\n                    setTimeout(attemptReconnect, 5000);\n                });\n        }\n        \n        // Show loading indicator\n        function showLoading() {\n            document.getElementById('loading').classList.remove('hidden');\n        }\n        \n        // Hide loading indicator\n        function hideLoading() {\n            document.getElementById('loading').classList.add('hidden');\n        }\n        \n        // =============================================================================\n        // WIFI FUNCTIONALITY\n        // =============================================================================\n        \n        // Fetch WiFi status\n        function fetchWiFiStatus() {\n            fetch('/api/wifi/status')\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error('Failed to fetch WiFi status');\n                    }\n                })\n                .then(data => {\n                    updateWiFiStatusDisplay(data);\n                })\n                .catch(error => console.error('Error fetching WiFi status:', error));\n        }\n        \n        // Update WiFi status display\n        function updateWiFiStatusDisplay(data) {\n            document.getElementById('wifi-status').textContent = data.status || '-';\n            document.getElementById('wifi-ip').textContent = data.ip || '-';\n            document.getElementById('current-wifi-ssid').textContent = data.ssid || 'None';\n            document.getElementById('current-wifi-rssi').textContent = data.rssi + 'dBm' || 'None';\n            document.getElementById('wifi-mdns').textContent = data.mdns_name ? `${data.mdns_name}.local` : '-';\n            \n            // Enable/disable disconnect button based on connection state\n            const disconnectButton = document.getElementById('disconnect-button');\n            disconnectButton.disabled = !data.client_enabled;\n        }\n        \n        // Scan for WiFi networks\n        function scanNetworks() {\n            const scanButton = document.getElementById('scan-button');\n            const scanStatus = document.getElementById('scan-status');\n            const networkSelect = document.getElementById('wifi-network-select');\n            \n            scanButton.disabled = true;\n            scanButton.textContent = 'Scanning...';\n            scanStatus.textContent = 'Starting scan...';\n            scanStatus.className = 'info';\n            scanStatus.classList.remove('hidden');\n            \n            // Clear existing options\n            networkSelect.innerHTML = '<option value=\"\">Select a network...</option>';\n            \n            // Start scan\n            fetch('/api/wifi/scan')\n                .then(response => {\n                    if (response.ok) {\n                        scanStatus.textContent = 'Scanning for networks...';\n                        // Poll for results\n                        pollScanResults();\n                    } else {\n                        throw new Error('Failed to start scan');\n                    }\n                })\n                .catch(error => {\n                    console.error('Error starting scan:', error);\n                    scanStatus.textContent = 'Failed to start scan';\n                    scanStatus.className = 'error';\n                    scanButton.disabled = false;\n                    scanButton.textContent = 'Scan for Networks';\n                });\n        }\n        \n        // Poll for scan results\n        function pollScanResults() {\n            const scanButton = document.getElementById('scan-button');\n            const scanStatus = document.getElementById('scan-status');\n            const networkSelect = document.getElementById('wifi-network-select');\n            \n            fetch('/api/wifi/scan-results')\n                .then(response => {\n                    if (response.status === 202) {\n                        // Still scanning, poll again\n                        scanStatus.textContent = 'Scanning for networks...';\n                        setTimeout(pollScanResults, 1000);\n                        return null; // Don't process further\n                    } else if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error('Scan failed');\n                    }\n                })\n                .then(data => {\n                    // Only process data if we actually got some (not null from 202 response)\n                    if (data === null) {\n                        return; // Exit early for 202 responses\n                    }\n                    \n                    if (data && data.networks && data.networks.length > 0) {\n                        data.networks.forEach(network => {\n                            const option = document.createElement('option');\n                            option.value = network.ssid;\n                            option.textContent = `${network.ssid} (${network.rssi} dBm, ${network.encryption})`;\n                            networkSelect.appendChild(option);\n                        });\n                        scanStatus.textContent = `Found ${data.networks.length} networks`;\n                        scanStatus.className = 'success';\n                        scanButton.disabled = false;\n                        scanButton.textContent = 'Scan for Networks';\n                    } else {\n                        scanStatus.textContent = 'No networks found';\n                        scanStatus.className = 'error';\n                        scanButton.disabled = false;\n                        scanButton.textContent = 'Scan for Networks';\n                    }\n                })\n                .catch(error => {\n                    console.error('Error getting scan results:', error);\n                    scanStatus.textContent = 'Failed to get scan results';\n                    scanStatus.className = 'error';\n                    scanButton.disabled = false;\n                    scanButton.textContent = 'Scan for Networks';\n                });\n        }\n        \n        // Handle network selection\n        function onNetworkSelect() {\n            const networkSelect = document.getElementById('wifi-network-select');\n            const testButton = document.getElementById('test-button');\n            const saveButton = document.getElementById('save-button');\n            \n            if (networkSelect.value) {\n                testButton.disabled = false;\n                saveButton.disabled = false;\n            } else {\n                testButton.disabled = true;\n                saveButton.disabled = true;\n            }\n        }\n        \n        // Test WiFi connection\n        function testConnection() {\n            const networkSelect = document.getElementById('wifi-network-select');\n            const passwordInput = document.getElementById('wifi-password');\n            const testButton = document.getElementById('test-button');\n            const wifiMessage = document.getElementById('wifi-message');\n            \n            const ssid = networkSelect.value;\n            const password = passwordInput.value;\n            \n            if (!ssid) {\n                showWiFiMessage('Please select a network', 'error');\n                return;\n            }\n            \n            testButton.disabled = true;\n            testButton.textContent = 'Testing...';\n            wifiMessage.textContent = 'Testing connection...';\n            wifiMessage.className = 'info';\n            wifiMessage.classList.remove('hidden');\n            \n            const formData = new FormData();\n            formData.append('ssid', ssid);\n            formData.append('password', password);\n            \n            fetch('/api/wifi/test', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                if (response.ok) {\n                    showWiFiMessage('Connection test successful!', 'success');\n                } else {\n                    showWiFiMessage('Connection test failed. Check password.', 'error');\n                }\n            })\n            .catch(error => {\n                console.error('Error testing connection:', error);\n                showWiFiMessage('Error testing connection: ' + error.message, 'error');\n            })\n            .finally(() => {\n                testButton.disabled = false;\n                testButton.textContent = 'Test Connection';\n            });\n        }\n        \n        // Save WiFi connection\n        function saveConnection() {\n            const networkSelect = document.getElementById('wifi-network-select');\n            const passwordInput = document.getElementById('wifi-password');\n            const saveButton = document.getElementById('save-button');\n            \n            const ssid = networkSelect.value;\n            const password = passwordInput.value;\n            \n            if (!ssid) {\n                showWiFiMessage('Please select a network', 'error');\n                return;\n            }\n            \n            saveButton.disabled = true;\n            saveButton.textContent = 'Saving...';\n            showWiFiMessage('Saving WiFi credentials...', 'info');\n            \n            const formData = new FormData();\n            formData.append('ssid', ssid);\n            formData.append('password', password);\n            \n            fetch('/api/wifi/connect', {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => {\n                if (response.ok) {\n                    showWiFiMessage('WiFi credentials saved successfully! Device will restart.', 'success');\n                    // Refresh status after a delay\n                    setTimeout(() => {\n                        fetchWiFiStatus();\n                        fetchStatus();\n                    }, 2000);\n                } else {\n                    showWiFiMessage('Failed to save WiFi credentials', 'error');\n                }\n            })\n            .catch(error => {\n                console.error('Error saving connection:', error);\n                showWiFiMessage('Error saving connection: ' + error.message, 'error');\n            })\n            .finally(() => {\n                saveButton.disabled = false;\n                saveButton.textContent = 'Save & Connect';\n            });\n        }\n        \n        // Disconnect WiFi\n        function disconnectWiFi() {\n            if (!confirm('Are you sure you want to disconnect and clear WiFi credentials?')) {\n                return;\n            }\n            \n            const disconnectButton = document.getElementById('disconnect-button');\n            disconnectButton.disabled = true;\n            disconnectButton.textContent = 'Disconnecting...';\n            showWiFiMessage('Disconnecting WiFi...', 'info');\n            \n            fetch('/api/wifi/disconnect', {\n                method: 'POST'\n            })\n            .then(response => {\n                if (response.ok) {\n                    showWiFiMessage('WiFi disconnected and credentials cleared', 'success');\n                    // Refresh status\n                    setTimeout(() => {\n                        fetchWiFiStatus();\n                        fetchStatus();\n                    }, 1000);\n                } else {\n                    showWiFiMessage('Failed to disconnect WiFi', 'error');\n                }\n            })\n            .catch(error => {\n                console.error('Error disconnecting WiFi:', error);\n                showWiFiMessage('Error disconnecting WiFi: ' + error.message, 'error');\n            })\n            .finally(() => {\n                disconnectButton.disabled = false;\n                disconnectButton.textContent = 'Disconnect & Clear';\n            });\n        }\n        \n        // Show WiFi message\n        function showWiFiMessage(message, type) {\n            const wifiMessage = document.getElementById('wifi-message');\n            wifiMessage.textContent = message;\n            wifiMessage.className = type;\n            wifiMessage.classList.remove('hidden');\n            \n            // Auto-hide success/info messages after 5 seconds\n            if (type === 'success' || type === 'info') {\n                setTimeout(() => {\n                    wifiMessage.classList.add('hidden');\n                }, 5000);\n            }\n        }\n        \n        // =============================================================================\n        // DEBUG FUNCTIONALITY\n        // =============================================================================\n        \n        // Debug state variables\n        let debugActive = false;\n        let debugWebSocket = null;\n        let debugDataBuffer = [];\n        let debugTimer = null;\n        let debugStartTime = Date.now();\n        \n        // Plot configuration\n        const PLOT_BUFFER_SIZE = 1000;  // Maximum data points to keep\n        const PLOT_WINDOW_SECONDS = 100; // Seconds of data to display\n        const PLOT_UPDATE_RATE = 100;   // ms between plot updates\n        \n        // Colors for plotting\n        const PLOT_COLORS = {\n            currentPosition: '#3498db',\n            currentVelocity: '#2ecc71',\n            targetPosition: '#e74c3c',\n            speedError: '#2ecc71',\n            errorIntegral: '#f39c12',\n            errorDerivative: '#9b59b6'\n        };\n        \n        // Toggle debug on/off\n        function toggleDebug() {\n            if (debugActive) {\n                stopDebug();\n            } else {\n                startDebug();\n            }\n        }\n        \n        // Start debug data collection and plotting\n        function startDebug() {\n            debugActive = true;\n            debugStartTime = Date.now();\n            \n            // Update UI\n            document.getElementById('debug-toggle').textContent = 'Stop Debug';\n            document.getElementById('debug-status').textContent = 'Starting...';\n            \n            // Connect to WebSocket\n            connectDebugWebSocket();\n            \n            // Start plot update timer\n            debugTimer = setInterval(updatePlots, PLOT_UPDATE_RATE);\n            \n            console.log('Debug started');\n        }\n        \n        // Stop debug data collection and plotting\n        function stopDebug() {\n            debugActive = false;\n            \n            // Update UI\n            document.getElementById('debug-toggle').textContent = 'Start Debug';\n            document.getElementById('debug-status').textContent = 'Stopped';\n            document.getElementById('debug-connection').textContent = 'Disconnected';\n            \n            // Stop timers\n            if (debugTimer) {\n                clearInterval(debugTimer);\n                debugTimer = null;\n            }\n            \n            // Disconnect WebSocket\n            disconnectDebugWebSocket();\n            \n            console.log('Debug stopped');\n        }\n        \n        // Clear all plot data\n        function clearPlots() {\n            debugDataBuffer = [];\n            debugStartTime = Date.now();\n            updatePlots();\n            updateDebugStats();\n        }\n        \n        // Update debug statistics display\n        function updateDebugStats() {\n            document.getElementById('debug-points').textContent = debugDataBuffer.length;\n        }\n        \n        // =============================================================================\n        // WEBSOCKET IMPLEMENTATION\n        // =============================================================================\n        \n        function connectDebugWebSocket() {\n            try {\n                // Construct WebSocket URL\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                const wsUrl = protocol + '//' + window.location.host + '/ws/debug';\n                \n                console.log('Connecting to WebSocket:', wsUrl);\n                document.getElementById('debug-connection').textContent = 'Connecting...';\n                \n                debugWebSocket = new WebSocket(wsUrl);\n                debugWebSocket.onopen = onDebugWebSocketOpen;\n                debugWebSocket.onmessage = onDebugWebSocketMessage;\n                debugWebSocket.onclose = onDebugWebSocketClose;\n                debugWebSocket.onerror = onDebugWebSocketError;\n                \n            } catch (error) {\n                console.error('Failed to create WebSocket:', error);\n                document.getElementById('debug-connection').textContent = 'Connection Failed';\n                document.getElementById('debug-status').textContent = 'Error';\n            }\n        }\n        \n        function disconnectDebugWebSocket() {\n            if (debugWebSocket) {\n                console.log('Disconnecting WebSocket');\n                \n                // Send stop command to backend before disconnecting\n                if (debugWebSocket.readyState === WebSocket.OPEN) {\n                    debugWebSocket.send('stop');\n                }\n                \n                debugWebSocket.close();\n                debugWebSocket = null;\n            }\n        }\n        \n        function onDebugWebSocketOpen(event) {\n            console.log('WebSocket connected');\n            document.getElementById('debug-connection').textContent = 'Connected';\n            document.getElementById('debug-status').textContent = 'Running';\n            \n            // Send start debug command to backend (plain string, not JSON)\n            if (debugWebSocket && debugWebSocket.readyState === WebSocket.OPEN) {\n                debugWebSocket.send('start');\n            }\n        }\n        \n        function onDebugWebSocketMessage(event) {\n            try {\n                const data = JSON.parse(event.data);\n                \n                // Validate required fields - all must come from backend\n                if (data.timestamp !== undefined && \n                    data.currentPosition !== undefined && \n                    data.targetPosition !== undefined &&\n                    data.speedError !== undefined &&\n                    data.errorIntegral !== undefined &&\n                    data.errorDerivative !== undefined) {\n                    \n                    // Use backend timestamp as-is (millis() since microcontroller boot)\n                    // Do NOT mix with Date.now() as they are different time references\n                    addDebugDataPoint(data);\n                } else {\n                    console.warn('Invalid debug data received (missing required fields):', data);\n                    console.warn('Expected fields: timestamp, currentPosition, targetPosition, speedError, errorIntegral, errorDerivative');\n                }\n                \n            } catch (error) {\n                console.error('Failed to parse WebSocket message:', error, event.data);\n            }\n        }\n        \n        function onDebugWebSocketClose(event) {\n            console.log('WebSocket disconnected:', event.code, event.reason);\n            document.getElementById('debug-connection').textContent = 'Disconnected';\n            \n            if (debugActive) {\n                // Attempt to reconnect if debug is still active\n                setTimeout(() => {\n                    if (debugActive) {\n                        console.log('Attempting to reconnect WebSocket...');\n                        connectDebugWebSocket();\n                    }\n                }, 2000);\n            }\n        }\n        \n        function onDebugWebSocketError(event) {\n            console.error('WebSocket error:', event);\n            document.getElementById('debug-connection').textContent = 'Error';\n        }\n        \n        // =============================================================================\n        // DATA MANAGEMENT\n        // =============================================================================\n        \n        // Add a new data point to the buffer\n        function addDebugDataPoint(dataPoint) {\n            debugDataBuffer.push(dataPoint);\n            \n            // Limit buffer size\n            if (debugDataBuffer.length > PLOT_BUFFER_SIZE) {\n                debugDataBuffer.shift();\n            }\n            \n            updateDebugStats();\n        }\n        \n        // Get data points within the display window\n        function getDisplayData() {\n            if (debugDataBuffer.length === 0) return [];\n            \n            // Use the most recent data point's timestamp as reference\n            // (backend sends millis() since boot, not Unix timestamp)\n            const mostRecentTimestamp = debugDataBuffer[debugDataBuffer.length - 1].timestamp;\n            const windowStart = mostRecentTimestamp - (PLOT_WINDOW_SECONDS * 1000);\n            \n            return debugDataBuffer.filter(point => point.timestamp >= windowStart);\n        }\n        \n        // =============================================================================\n        // PLOTTING FUNCTIONS\n        // =============================================================================\n        \n        // Update both plots\n        function updatePlots() {\n            updatePositionPlot();\n            updateErrorPlot();\n        }\n        \n        // Update the position tracking plot\n        function updatePositionPlot() {\n            const canvas = document.getElementById('position-plot');\n            const ctx = canvas.getContext('2d');\n            const data = getDisplayData();\n            \n            if (data.length === 0) {\n                clearCanvas(ctx, canvas);\n                return;\n            }\n            \n            // Clear canvas\n            clearCanvas(ctx, canvas);\n            \n            // Draw grid\n            drawGrid(ctx, canvas);\n            \n            // Calculate scales using backend timestamps (millis() since boot)\n            const timeRange = PLOT_WINDOW_SECONDS * 1000;\n            const mostRecentTimestamp = data[data.length - 1].timestamp;\n            const timeStart = mostRecentTimestamp - timeRange;\n            \n            const positions = data.flatMap(d => [d.currentPosition, d.targetPosition]);\n            const posMin = Math.min(...positions);\n            const posMax = Math.max(...positions);\n            const posRange = posMax - posMin || 100;\n            const posMargin = posRange * 0.1;\n            \n            // Draw position lines\n            drawLine(ctx, canvas, data, 'currentPosition', PLOT_COLORS.currentPosition, \n                    timeStart, timeRange, posMin - posMargin, posRange + 2 * posMargin);\n            drawLine(ctx, canvas, data, 'currentVelocity', PLOT_COLORS.currentVelocity, \n                    timeStart, timeRange, posMin - posMargin, posRange + 2 * posMargin);\n            drawLine(ctx, canvas, data, 'targetPosition', PLOT_COLORS.targetPosition, \n                    timeStart, timeRange, posMin - posMargin, posRange + 2 * posMargin);\n            \n            // Draw axis labels\n            drawAxisLabels(ctx, canvas, 'Time (s)', 'Position (counts)');\n        }\n        \n        // Update the error terms plot\n        function updateErrorPlot() {\n            const canvas = document.getElementById('error-plot');\n            const ctx = canvas.getContext('2d');\n            const data = getDisplayData();\n            \n            if (data.length === 0) {\n                clearCanvas(ctx, canvas);\n                return;\n            }\n            \n            // Clear canvas\n            clearCanvas(ctx, canvas);\n            \n            // Draw grid\n            drawGrid(ctx, canvas);\n            \n            // Calculate scales using backend timestamps (millis() since boot)\n            const timeRange = PLOT_WINDOW_SECONDS * 1000;\n            const mostRecentTimestamp = data[data.length - 1].timestamp;\n            const timeStart = mostRecentTimestamp - timeRange;\n            \n            const errors = data.flatMap(d => [d.speedError, d.errorIntegral, d.errorDerivative]);\n            const errorMin = Math.min(...errors);\n            const errorMax = Math.max(...errors);\n            const errorRange = errorMax - errorMin || 1;\n            const errorMargin = errorRange * 0.1;\n            \n            // Draw error lines\n            drawLine(ctx, canvas, data, 'speedError', PLOT_COLORS.speedError, \n                    timeStart, timeRange, errorMin - errorMargin, errorRange + 2 * errorMargin);\n            drawLine(ctx, canvas, data, 'errorIntegral', PLOT_COLORS.errorIntegral, \n                    timeStart, timeRange, errorMin - errorMargin, errorRange + 2 * errorMargin);\n            drawLine(ctx, canvas, data, 'errorDerivative', PLOT_COLORS.errorDerivative, \n                    timeStart, timeRange, errorMin - errorMargin, errorRange + 2 * errorMargin);\n            \n            // Draw axis labels\n            drawAxisLabels(ctx, canvas, 'Time (s)', 'Error Terms');\n        }\n        \n        // Clear canvas with white background\n        function clearCanvas(ctx, canvas) {\n            ctx.fillStyle = '#ffffff';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        \n        // Draw grid lines\n        function drawGrid(ctx, canvas) {\n            ctx.strokeStyle = '#f0f0f0';\n            ctx.lineWidth = 1;\n            \n            // Vertical grid lines\n            for (let x = 0; x <= canvas.width; x += canvas.width / 10) {\n                ctx.beginPath();\n                ctx.moveTo(x, 0);\n                ctx.lineTo(x, canvas.height);\n                ctx.stroke();\n            }\n            \n            // Horizontal grid lines\n            for (let y = 0; y <= canvas.height; y += canvas.height / 6) {\n                ctx.beginPath();\n                ctx.moveTo(0, y);\n                ctx.lineTo(canvas.width, y);\n                ctx.stroke();\n            }\n        }\n        \n        // Draw a data line\n        function drawLine(ctx, canvas, data, property, color, timeStart, timeRange, valueMin, valueRange) {\n            if (data.length < 2) return;\n            \n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            \n            let firstPoint = true;\n            for (const point of data) {\n                const x = ((point.timestamp - timeStart) / timeRange) * canvas.width;\n                const y = canvas.height - (((point[property] - valueMin) / valueRange) * canvas.height);\n                \n                if (firstPoint) {\n                    ctx.moveTo(x, y);\n                    firstPoint = false;\n                } else {\n                    ctx.lineTo(x, y);\n                }\n            }\n            \n            ctx.stroke();\n        }\n        \n        // Draw axis labels\n        function drawAxisLabels(ctx, canvas, xLabel, yLabel) {\n            ctx.fillStyle = '#666';\n            ctx.font = '12px Arial';\n            ctx.textAlign = 'center';\n            \n            // X-axis label\n            ctx.fillText(xLabel, canvas.width / 2, canvas.height - 5);\n            \n            // Y-axis label (rotated)\n            ctx.save();\n            ctx.translate(15, canvas.height / 2);\n            ctx.rotate(-Math.PI / 2);\n            ctx.fillText(yLabel, 0, 0);\n            ctx.restore();\n        }\n    </script>\n</body>\n</html> ";

// Size of the HTML content
const size_t html_index_size = 78818;

#endif // WEB_UI_H
